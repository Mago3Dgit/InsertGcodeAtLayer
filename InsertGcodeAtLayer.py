# Created non-profit
# Modification 26.05.2024
# V0.45
# Created from Filament change and Insert At Layer Change

from typing import List
from ..Script import Script

from UM.Application import Application #To get the current printer's settings.

class InsertGcodeAtLayer(Script):

    _layer_keyword = ";LAYER:"

    def __init__(self):
        super().__init__()

    def getSettingDataString(self):
        return """{
            "name": "Insert Gcode At Layer",
            "key": "InsertGcodeAtLayer",
            "metadata": {},
            "version": 2,
            "settings":
            {
            
                 "gcode_to_add":
                {
                    "label": "G-code to insert",
                    "description": "G-code to add before layer.",
                    "type": "str",
                    "default_value": ""
                },
                "layer_number":
                {
                    "label": "Layer",
                    "description": "This will be before the layer starts printing.",
                    "unit": "",
                    "type": "str",
                    "default_value": "1"
                },                   
                "machine_gcode_flavor":
                {
                    "label": "G-code flavor",
                    "description": "The type of g-code to be generated. This setting is controlled by the script and will not be visible.",
                    "type": "enum",
                    "options":
                    {
                        "RepRap (Marlin/Sprinter)": "Marlin",
                        "RepRap (Volumetric)": "Marlin (Volumetric)",
                        "RepRap (RepRap)": "RepRap",
                        "UltiGCode": "Ultimaker 2",
                        "Griffin": "Griffin",
                        "Makerbot": "Makerbot",
                        "BFB": "Bits from Bytes",
                        "MACH3": "Mach3",
                        "Repetier": "Repetier"
                    },
                    "default_value": "RepRap (Marlin/Sprinter)",
                    "enabled": "false"
                }
            }
        }"""

    ##  Copy machine name and gcode flavor from global stack so we can use their value in the script stack
    def initialize(self) -> None:
        super().initialize()

        global_container_stack = Application.getInstance().getGlobalContainerStack()
        if global_container_stack is None or self._instance is None:
            return

        for key in ["machine_gcode_flavor"]:
            self._instance.setProperty(key, "value", global_container_stack.getProperty(key, "value"))

    def execute(self, data: List[str]):
        """Inserts the g-code at specific layer numbers.

        :param data: A list of layers of g-code.
        :return: A similar list, with filament change commands inserted.
        """
        layer_nums = self.getSettingValueByKey("layer_number")

        gcode_to_add = self.getSettingValueByKey("gcode_to_add")

        color_change = gcode_to_add

        color_change = color_change + " ; Generated by InsertGcodeAtLayer\n"

        layer_targets = layer_nums.split(",")
        if len(layer_targets) > 0:
            for layer_num in layer_targets:
                try:
                    layer_num = int(layer_num.strip()) + 1 #Needs +1 because the 1st layer is reserved for start g-code.
                except ValueError: #Layer number is not an integer.
                    continue
                if 0 < layer_num < len(data):
                    data[layer_num] = color_change + data[layer_num]

        return data
